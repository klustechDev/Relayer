// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RelayerExploit {
    address public relayer;
    bytes32 public lastFakeCommitment;
    uint256 public lastFakeAmount;

    event CommitmentManipulated(bytes32 fakeCommitment, uint256 fakeAmount);

    constructor() {
        relayer = msg.sender;  // Assign relayer as the deployer
    }

    function commitmentManipulation(bytes32 fakeCommitment, uint256 fakeAmount) public returns (bool) {
        require(msg.sender == relayer, "Only relayer can exploit");

        lastFakeCommitment = fakeCommitment;
        lastFakeAmount = fakeAmount;

        emit CommitmentManipulated(fakeCommitment, fakeAmount);

        return true;
    }

    function getLastManipulatedCommitment() external view returns (bytes32, uint256) {
        return (lastFakeCommitment, lastFakeAmount);
    }
}
